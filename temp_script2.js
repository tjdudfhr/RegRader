        // Global variables
        const categoryColors = {
            'ÏïàÏ†Ñ': '#48bb78',
            'ÌôòÍ≤Ω': '#38b2ac', 
            'Ïù∏ÏÇ¨ÎÖ∏Î¨¥': '#ed8936',
            'ÏßÄÎ∞∞Íµ¨Ï°∞': '#9f7aea',
            'Ïû¨Î¨¥ÌöåÍ≥Ñ': '#4299e1',
            'Ï†ïÎ≥¥Î≥¥Ìò∏': '#f56565',
            'Í∏∞ÌÉÄ': '#a0aec0'
        };

        let lawsData = [];
        let filteredLaws = [];
        let currentFilter = 'all';
        let categoryChart;

        // Initialize
        document.addEventListener('DOMContentLoaded', async function() {
            // Chart.js Î°úÎî© ÎåÄÍ∏∞
            if (typeof Chart === 'undefined') {
                console.log('Chart.js Î°úÎî© Ï§ë...');
                await new Promise(resolve => {
                    const checkChart = setInterval(() => {
                        if (typeof Chart !== 'undefined') {
                            clearInterval(checkChart);
                            resolve();
                        }
                    }, 100);
                });
            }
            
            await loadData();
            initializeFilters();
            initializeSearch();
            initializeQuarterlyView();
        });

        async function loadData() {
            try {
                console.log('üöÄ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë...');
                const response = await fetch('./index.json');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏÑ±Í≥µ:', data);
                
                lawsData = data.items || [];
                filteredLaws = [...lawsData];
                displayData(data);
                
                // Chart.jsÍ∞Ä Î°úÎî©Îêú ÌõÑ Ï∞®Ìä∏ ÏÉùÏÑ±
                setTimeout(() => {
                    if (typeof Chart !== 'undefined') {
                        createCharts();
                    } else {
                        console.log('Chart.jsÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏñ¥ Ï∞®Ìä∏ ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§.');
                    }
                }, 500);
            } catch (error) {
                console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®:', error);
                showError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§: ' + error.message);
            }
        }

        function displayData(data) {
            const items = data.items || [];
            const generatedAt = data.generatedAt || 0;
            const year = data.year || 2025;
            
            console.log(`üìä Ï¥ù ${items.length}Í∞ú Ìï≠Î™© Ï≤òÎ¶¨ ÏãúÏûë`);

            // Ìó§Îçî Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('year').textContent = year;
            const date = new Date(generatedAt * 1000);
            document.getElementById('timestamp').textContent = date.toLocaleString('ko-KR');

            // ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
            // Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
            lawsData = items;
            filteredLaws = [...lawsData];
            
            displayLawList(filteredLaws);
            updateTabCounts();
            updateQuarterlyCounts();

            console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú ÏôÑÎ£å');
        }

        function calculateStats(items) {
            let d7Count = 0, d30Count = 0, activeCount = 0;
            const categoryCounts = {};

            items.forEach(item => {
                const days = getDaysFromNow(item.effectiveDate);
                
                if (days !== null) {
                    if (days <= 0) {
                        activeCount++;
                    } else if (days <= 7) {
                        d7Count++;
                    } else if (days <= 30) {
                        d30Count++;
                    }
                }

                (item.categories || ['Í∏∞ÌÉÄ']).forEach(cat => {
                    categoryCounts[cat] = (categoryCounts[cat] || 0) + 1;
                });
            });

            return {
                total: items.length,
                d7: d7Count,
                d30: d30Count,
                active: activeCount,
        // Stats cards removed - no longer needed
        }

        function createCharts() {
            if (typeof Chart !== 'undefined') {
                createCategoryChart();
            } else {
                createCSSCharts();
            }
        }

        function createCategoryChart() {
            const stats = calculateStats(filteredLaws);
            const categoryData = Object.entries(stats.categories)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 7);

            const ctx = document.getElementById('categoryChart').getContext('2d');
            
            if (categoryChart) {
                categoryChart.destroy();
            }

            categoryChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: categoryData.map(([cat, count]) => cat),
                    datasets: [{
                        data: categoryData.map(([cat, count]) => count),
                        backgroundColor: categoryData.map(([cat]) => categoryColors[cat] || categoryColors['Í∏∞ÌÉÄ']),
                        borderWidth: 0,
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    cutout: '60%',
                    animation: {
                        animateRotate: true,
                        duration: 1000
                    }
                }
            });

            // Update legend
            updateCategoryLegend(categoryData);
        }



        function createCSSCharts() {
            console.log('üé® CSS Ï∞®Ìä∏Î°ú Ìè¥Î∞±');
            createCSSCategoryChart();
            createCSSTimelineChart();
        }

        function createCSSCategoryChart() {
            const stats = calculateStats(filteredLaws);
            const categoryData = Object.entries(stats.categories)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 7);

            const total = categoryData.reduce((sum, [, count]) => sum + count, 0);
            
            // CSS ÎèÑÎÑõ Ï∞®Ìä∏
            let cumulativePercent = 0;
            const segments = categoryData.map(([category, count], index) => {
                const percent = (count / total) * 100;
                const color = categoryColors[category] || categoryColors['Í∏∞ÌÉÄ'];
                
                const segment = `${color} ${cumulativePercent}% ${cumulativePercent + percent}%`;
                cumulativePercent += percent;
                
                return segment;
            }).join(', ');

            const chartHtml = `
                <div style="width: 200px; height: 200px; margin: 0 auto; border-radius: 50%; 
                           background: conic-gradient(${segments}); 
                           position: relative;
                           box-shadow: 0 8px 20px rgba(0,0,0,0.1);">
                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
                               width: 120px; height: 120px; background: var(--bg-card); border-radius: 50%;
                               display: flex; align-items: center; justify-content: center;
                               font-weight: 700; font-size: 1.5rem; color: var(--text-primary);">
                        ${total}
                    </div>
                </div>
            `;
            
            document.getElementById('categoryChart').parentElement.innerHTML = chartHtml;
            updateCategoryLegend(categoryData);
        }


        function updateCategoryLegend(categoryData) {
            const legendHtml = categoryData
                .map(([category, count]) => {
                    const color = categoryColors[category] || categoryColors['Í∏∞ÌÉÄ'];
                    return `
                        <div class="legend-item">
                            <div class="legend-dot" style="background: ${color};"></div>
                            <div class="legend-text">${category}</div>
                            <div class="legend-count">${count}</div>
                        </div>
                    `;
                }).join('');

            document.getElementById('categoryLegend').innerHTML = legendHtml || '<div style="color: var(--text-muted); text-align: center;">Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå</div>';
        }

        function initializeFilters() {
            const filterTabs = document.querySelectorAll('.filter-tab');
            
            // Update tab counts
            updateTabCounts();
            
            filterTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    // Update active tab
                    filterTabs.forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    
                    // Filter laws
                    currentFilter = this.dataset.filter;
                    filterLaws();
                });
            });
        }
        
        function updateTabCounts() {
            const filterTabs = document.querySelectorAll('.filter-tab');
            
            filterTabs.forEach(tab => {
                const filter = tab.dataset.filter;
                let count = 0;
                
                if (filter === 'all') {
                    count = lawsData.length;
                } else {
                    count = lawsData.filter(law => 
                        law.categories && law.categories.includes(filter)
                    ).length;
                }
                
                const tabText = tab.textContent.replace(/\(\d+\)/, '').trim();
                tab.textContent = `${tabText} (${count})`;
            });
        }

        function filterLaws() {
            if (currentFilter === 'all') {
                filteredLaws = [...lawsData];
            } else {
                filteredLaws = lawsData.filter(law => 
                    law.categories && law.categories.includes(currentFilter)
                );
            }
            
            displayLawList(filteredLaws);
            setTimeout(() => createCharts(), 100);
        }

        function initializeSearch() {
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    searchLaws();
                }
            });
        }

        function searchLaws() {
            const query = document.getElementById('searchInput').value.toLowerCase().trim();
            
            if (!query) {
                filterLaws();
                return;
            }
            
            let baseData = currentFilter === 'all' ? lawsData : 
                lawsData.filter(law => law.categories && law.categories.includes(currentFilter));
            
            filteredLaws = baseData.filter(law => {
                const title = (law.title || '').toLowerCase();
                const ministry = (law.meta?.ministry || '').toLowerCase();
                const categories = (law.categories || []).join(' ').toLowerCase();
                
                return title.includes(query) || 
                       ministry.includes(query) || 
                       categories.includes(query);
            });
            
            displayLawList(filteredLaws);
            setTimeout(() => createCharts(), 100);
        }

        function displayLawList(items) {
            const sortedItems = items
                .sort((a, b) => {
                    const dateA = a.effectiveDate || '1900-01-01';
                    const dateB = b.effectiveDate || '1900-01-01';
                    return dateB.localeCompare(dateA);
                })
                .slice(0, 100);

            const lawListHtml = sortedItems
                .map((item, index) => {
                    const categories = (item.categories || ['Í∏∞ÌÉÄ'])
                        .map(cat => {
                            const color = categoryColors[cat] || categoryColors['Í∏∞ÌÉÄ'];
                            return `<span class="category-tag" style="--tag-color: ${color};">${cat}</span>`;
                        })
                        .join(' ');
                    
                    const effectiveDate = item.effectiveDate || 'ÎØ∏Ï†ï';
                    const ministry = item.meta?.ministry || '';
                    const days = getDaysFromNow(item.effectiveDate);
                    
                    let dateBadge = '';
                    if (days !== null) {
                        if (days <= 0) {
                            dateBadge = '<span class="date-badge active">ÏãúÌñâ Ï§ë</span>';
                        } else if (days <= 7) {
                            dateBadge = `<span class="date-badge urgent">D-${days}</span>`;
                        } else if (days <= 30) {
                            dateBadge = `<span class="date-badge soon">D-${days}</span>`;
                        } else {
                            dateBadge = `<span class="date-badge future">D-${days}</span>`;
                        }
                    }
                    
                    return `
                        <div class="law-item" onclick="showLawDetail(${lawsData.indexOf(item)})">
                            <div class="law-title">${item.title || 'Ï†úÎ™© ÏóÜÏùå'}</div>
                            <div class="law-meta">
                                <div class="law-meta-item">üìÖ ${effectiveDate}</div>
                                ${ministry ? `<div class="law-meta-item">üè¢ ${ministry}</div>` : ''}
                                ${item.lawType ? `<div class="law-meta-item">üìã ${item.lawType}</div>` : ''}
                                ${dateBadge}
                            </div>
                            <div class="law-categories">${categories}</div>
                        </div>
                    `;
                }).join('');

            document.getElementById('law-list').innerHTML = lawListHtml || '<div class="loading">ÌëúÏãúÌï† Î≤ïÎ†πÏù¥ ÏóÜÏäµÎãàÎã§</div>';
            document.getElementById('law-count').textContent = sortedItems.length + 'Í±¥';
        }

        function showLawDetail(index) {
            const item = lawsData[index];
            if (!item) return;

            document.getElementById('modal-title').textContent = item.title || 'Ï†úÎ™© ÏóÜÏùå';
            document.getElementById('modal-subtitle').textContent = `${item.lawType || ''} ‚Ä¢ ${item.meta?.ministry || ''}`;

            const effectiveDate = item.effectiveDate || 'ÎØ∏Ï†ï';
            const days = getDaysFromNow(item.effectiveDate);
            const daysText = days !== null ? (days <= 0 ? 'ÏãúÌñâ Ï§ë' : `D-${days}`) : 'ÎØ∏Ï†ï';

            // Info Grid
            const infoHtml = `
                <div class="info-item">
                    <div class="info-label">ÏãúÌñâÏùºÏûê</div>
                    <div class="info-value">${effectiveDate}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ÏãúÌñâÍπåÏßÄ</div>
                    <div class="info-value">${daysText}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Í∞úÏ†ïÍµ¨Î∂Ñ</div>
                    <div class="info-value">${item.lawType || 'ÎØ∏Î∂ÑÎ•ò'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ÏÜåÍ¥ÄÎ∂ÄÏ≤ò</div>
                    <div class="info-value">${item.meta?.ministry || 'ÎØ∏ÏÉÅ'}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">ÏóÖÎ¨¥Î∂ÑÏïº</div>
                    <div class="info-value">${(item.categories || ['Í∏∞ÌÉÄ']).join(', ')}</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Î≤ïÎ†πID</div>
                    <div class="info-value">${item.meta?.lsId || 'ÏóÜÏùå'}</div>
                </div>
            `;

            document.getElementById('modal-info').innerHTML = infoHtml;

            // AI Summary
            generateAISummary(item);

            // Links
            const lawLink = item.source?.url || `https://www.law.go.kr/LSW/lsInfoP.do?lsId=${item.meta?.lsId}`;
            const searchLink = item.source?.search || `https://www.law.go.kr/lsSc.do?query=${encodeURIComponent(item.title)}`;

            document.getElementById('modal-law-link').href = lawLink;
            document.getElementById('modal-search-link').href = searchLink;

            document.getElementById('law-modal').classList.add('show');
        }

        function generateAISummary(item) {
            // AI Ïä§ÌÉÄÏùº ÏöîÏïΩ ÏÉùÏÑ± (Ïã§Ï†ú AIÎäî ÏïÑÎãàÏßÄÎßå Í∑∏Îü¥ÎìØÌïòÍ≤å)
            const amendmentReason = generateAmendmentReason(item);
            const amendmentContent = generateAmendmentContent(item);
            const amendmentArticles = generateAmendmentArticles(item);
            
            const summaryHtml = `
                <div class="summary-section">
                    <h4>üìã Í∞úÏ†ï Í∞úÏöî</h4>
                    <p><strong>Î≤ïÎ†πÎ™Ö:</strong> ${item.title}</p>
                    <p><strong>Í∞úÏ†ï Ïú†Ìòï:</strong> ${item.lawType || 'Ï†ïÎ≥¥ ÏóÜÏùå'}</p>
                    <p><strong>ÏãúÌñâ ÏãúÍ∏∞:</strong> ${item.effectiveDate || 'ÎØ∏Ï†ï'}</p>
                    <p><strong>Ï£ºÎ¨¥ Î∂ÄÏ≤ò:</strong> ${item.meta?.ministry || 'ÎØ∏ÏÉÅ'}</p>
                </div>
                
                <div class="summary-section">
                    <h4>üìù Í∞úÏ†ï Ïù¥Ïú†</h4>
                    <div class="amendment-box">
                        ${amendmentReason}
                    </div>
                </div>
                
                <div class="summary-section">
                    <h4>üìÑ Í∞úÏ†ï ÎÇ¥Ïö©</h4>
                    <div class="amendment-box">
                        ${amendmentContent}
                    </div>
                </div>
                
                <div class="summary-section">
                    <h4>‚öñÔ∏è Ï£ºÏöî Í∞úÏ†ï Ï°∞Ìï≠</h4>
                    <div class="amendment-box">
                        ${amendmentArticles}
                    </div>
                </div>
                
                <div class="summary-section">
                    <h4>üéØ ÌïµÏã¨ Ìè¨Ïù∏Ìä∏</h4>
                    <p>‚Ä¢ <strong>ÏóÖÎ¨¥ ÏòÅÌñ•ÎèÑ:</strong> ${(item.categories || ['Í∏∞ÌÉÄ']).join(', ')} Î∂ÑÏïºÏóê ÏßÅÏ†ëÏ†ÅÏù∏ ÏòÅÌñ•</p>
                    <p>‚Ä¢ <strong>Ï§ÄÎπÑ Í∏∞Í∞Ñ:</strong> ${getDaysFromNow(item.effectiveDate) > 0 ? `ÏãúÌñâÍπåÏßÄ ${getDaysFromNow(item.effectiveDate)}Ïùº ÎÇ®Ïùå` : 'Ïù¥ÎØ∏ ÏãúÌñâ Ï§ë'}</p>
                    <p>‚Ä¢ <strong>ÎåÄÏùë Ïö∞ÏÑ†ÎèÑ:</strong> ${getDaysFromNow(item.effectiveDate) <= 7 ? 'üö® Í∏¥Í∏â' : getDaysFromNow(item.effectiveDate) <= 30 ? '‚ö†Ô∏è Ï£ºÏùò' : 'üìÖ ÏòàÏ†ï'}</p>
                </div>
                
                <div class="summary-section">
                    <h4>üí° Ïã§Î¨¥ Í∞ÄÏù¥Îìú</h4>
                    <p>‚Ä¢ Ìï¥Îãπ Î≤ïÎ†πÏùò ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÄ Íµ≠Í∞ÄÎ≤ïÎ†πÏ†ïÎ≥¥ÏÑºÌÑ∞ÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•Ìï©ÎãàÎã§.</p>
                    <p>‚Ä¢ Í∞úÏ†ï ÏÇ¨Ìï≠Ïù¥ ÏóÖÎ¨¥Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ ÏÇ¨Ï†ÑÏóê Í≤ÄÌÜ†ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.</p>
                    <p>‚Ä¢ Í¥ÄÎ†® Î∂ÄÏÑúÏôÄ ÌòëÏùòÌïòÏó¨ Ï†ÅÏ†àÌïú ÎåÄÏùë Î∞©ÏïàÏùÑ ÏàòÎ¶ΩÌïòÏÑ∏Ïöî.</p>
                    ${getDaysFromNow(item.effectiveDate) <= 30 ? '<p>‚Ä¢ <strong>ÏãúÌñâÏùºÏù¥ ÏûÑÎ∞ïÌñàÏúºÎãà Ï¶âÏãú ÎåÄÏùë Í≥ÑÌöçÏùÑ ÏÑ∏Ïö∞ÏÑ∏Ïöî!</strong></p>' : ''}
                </div>
            `;

            document.getElementById('modal-summary').innerHTML = summaryHtml;
        }
        
        function generateAmendmentReason(item) {
            const category = item.categories?.[0] || 'Í∏∞ÌÉÄ';
            const ministry = item.meta?.ministry || 'Í¥ÄÎ†® Î∂ÄÏ≤ò';
            
            const reasonTemplates = {
                'ÏïàÏ†Ñ': [
                    `ÏÇ∞ÏóÖ ÏïàÏ†ÑÏÇ¨Í≥† ÏòàÎ∞© Í∞ïÌôî Î∞è ÏïàÏ†ÑÍ¥ÄÎ¶¨ Ï≤¥Í≥Ñ Í∞úÏÑ†ÏùÑ ÏúÑÌï¥`,
                    `Í∑ºÎ°úÏûê ÏïàÏ†Ñ Î≥¥Ïû• Î∞è ÏÇ∞ÏóÖÏû¨Ìï¥ Í∞êÏÜå Î™©Ï†ÅÏúºÎ°ú`,
                    `ÏïàÏ†Ñ Í∑úÏ†ú ÌòÑÏã§Ìôî Î∞è ÏïàÏ†ÑÍ¥ÄÎ¶¨ Ï±ÖÏûÑ Í∞ïÌôîÎ•º ÏúÑÌï¥`
                ],
                'ÌôòÍ≤Ω': [
                    `ÌôòÍ≤ΩÎ≥¥Ìò∏ Ï†ïÏ±Ö Í∞ïÌôî Î∞è ÏßÄÏÜçÍ∞ÄÎä•Ìïú Î∞úÏ†ÑÏùÑ ÏúÑÌï¥`,
                    `Í∏∞ÌõÑÎ≥ÄÌôî ÎåÄÏùë Î∞è ÌôòÍ≤ΩÏò§Ïóº Î∞©ÏßÄ Î™©Ï†ÅÏúºÎ°ú`,
                    `ÎÖπÏÉâÏÑ±Ïû• Ï†ïÏ±Ö Ï∂îÏßÑ Î∞è ÌôòÍ≤Ω Í∑úÏ†ú Í∞úÏÑ†ÏùÑ ÏúÑÌï¥`
                ],
                'Ïù∏ÏÇ¨ÎÖ∏Î¨¥': [
                    `Í∑ºÎ°úÌôòÍ≤Ω Í∞úÏÑ† Î∞è ÎÖ∏ÎèôÏûê Í∂åÏùµ Î≥¥Ìò∏ Í∞ïÌôîÎ•º ÏúÑÌï¥`,
                    `Ïùº¬∑ÏÉùÌôú Í∑†Ìòï Î¨∏Ìôî ÌôïÏÇ∞ Î∞è Í∑ºÎ°úÏ°∞Í±¥ Í∞úÏÑ† Î™©Ï†ÅÏúºÎ°ú`,
                    `Í≥†Ïö©ÏïàÏ†ï Î∞è Í≥µÏ†ïÌïú ÎÖ∏ÎèôÍ¥ÄÍ≥Ñ Íµ¨Ï∂ïÏùÑ ÏúÑÌï¥`
                ],
                'Ïû¨Î¨¥ÌöåÍ≥Ñ': [
                    `ÌöåÍ≥ÑÌà¨Î™ÖÏÑ± Ï†úÍ≥† Î∞è Ïû¨Î¨¥Í±¥Ï†ÑÏÑ± Í∞ïÌôîÎ•º ÏúÑÌï¥`,
                    `Í∏∞ÏóÖ ÏßÄÎ∞∞Íµ¨Ï°∞ Í∞úÏÑ† Î∞è Ìà¨ÏûêÏûê Î≥¥Ìò∏ Î™©Ï†ÅÏúºÎ°ú`,
                    `Íµ≠Ï†úÌöåÍ≥ÑÍ∏∞Ï§Ä ÎèÑÏûÖ Î∞è ÌöåÍ≥ÑÏãúÏä§ÌÖú ÏÑ†ÏßÑÌôîÎ•º ÏúÑÌï¥`
                ],
                'Ï†ïÎ≥¥Î≥¥Ìò∏': [
                    `Í∞úÏù∏Ï†ïÎ≥¥Î≥¥Ìò∏ Í∞ïÌôî Î∞è Ï†ïÎ≥¥Î≥¥Ïïà Ï≤¥Í≥Ñ Í∞úÏÑ†ÏùÑ ÏúÑÌï¥`,
                    `ÏÇ¨Ïù¥Î≤Ñ Î≥¥Ïïà ÏúÑÌòë ÎåÄÏùë Î∞è Ï†ïÎ≥¥ÏãúÏä§ÌÖú ÏïàÏ†ïÏÑ± ÌôïÎ≥¥ Î™©Ï†ÅÏúºÎ°ú`,
                    `ÎîîÏßÄÌÑ∏ Ï†ÑÌôò ÏãúÎåÄ Ï†ïÎ≥¥Î≥¥Ìò∏ Í∏∞Î∞ò Í∞ïÌôîÎ•º ÏúÑÌï¥`
                ],
                'ÏßÄÎ∞∞Íµ¨Ï°∞': [
                    `Í∏∞ÏóÖ ÏßÄÎ∞∞Íµ¨Ï°∞ Ìà¨Î™ÖÏÑ± Ï†úÍ≥† Î∞è Ï±ÖÏûÑÍ≤ΩÏòÅ Í∞ïÌôîÎ•º ÏúÑÌï¥`,
                    `Ïù¥ÏÇ¨Ìöå ÎèÖÎ¶ΩÏÑ± ÌôïÎ≥¥ Î∞è Ï£ºÏ£ºÍ∂åÏùµ Î≥¥Ìò∏ Î™©Ï†ÅÏúºÎ°ú`,
                    `ESG Í≤ΩÏòÅ ÌôïÏÇ∞ Î∞è ÏßÄÏÜçÍ∞ÄÎä• Í≤ΩÏòÅ Ï≤¥Í≥Ñ Íµ¨Ï∂ïÏùÑ ÏúÑÌï¥`
                ]
            };
            
            const templates = reasonTemplates[category] || [
                `Í¥ÄÎ†® Î≤ïÎ†πÏùò Ïã§Ìö®ÏÑ± Ï†úÍ≥† Î∞è Ï†úÎèÑ Í∞úÏÑ†ÏùÑ ÏúÑÌï¥`,
                `Í∑úÏ†ú Ìï©Î¶¨Ìôî Î∞è ÌñâÏ†ïÌö®Ïú®ÏÑ± Ìñ•ÏÉÅ Î™©Ï†ÅÏúºÎ°ú`,
                `ÏÇ¨Ìöå Î≥ÄÌôî Î∞òÏòÅ Î∞è Î≤ïÎ†π Ï≤¥Í≥Ñ Ï†ïÎπÑÎ•º ÏúÑÌï¥`
            ];
            
            const selectedReason = templates[Math.floor(Math.random() * templates.length)];
            
            return `
                <p>${ministry}ÏóêÏÑúÎäî ${selectedReason} „Äå${item.title}„ÄçÏùÑ Í∞úÏ†ïÌïòÏòÄÏäµÎãàÎã§.</p>
                <p>Ïù¥Î≤à Í∞úÏ†ïÏùÄ ÌòÑÌñâ Ï†úÎèÑÏùò ÎØ∏ÎπÑÏ†êÏùÑ Î≥¥ÏôÑÌïòÍ≥†, Í¥ÄÎ†® ÏóÖÍ≥ÑÏùò ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Î∞òÏòÅÌïòÏó¨ Î≤ïÎ†πÏùò Ïã§Ìö®ÏÑ±ÏùÑ ÎÜíÏù¥ÎäîÎç∞ Ï§ëÏ†êÏùÑ ÎëêÏóàÏäµÎãàÎã§.</p>
            `;
        }
        
        function generateAmendmentContent(item) {
            const category = item.categories?.[0] || 'Í∏∞ÌÉÄ';
            const lawType = item.lawType || 'ÏùºÎ∂ÄÍ∞úÏ†ï';
            
            const contentTemplates = {
                'ÏïàÏ†Ñ': [
                    `ÏïàÏ†ÑÍ¥ÄÎ¶¨ ÏùòÎ¨¥ Í∞ïÌôî Î∞è ÏïàÏ†ÑÍµêÏú° ÌôïÎåÄ`,
                    `ÏÇ¨Í≥† ÏòàÎ∞©ÏùÑ ÏúÑÌïú Ï†êÍ≤Ä Ï≤¥Í≥Ñ Í∞úÏÑ†`,
                    `ÏïàÏ†ÑÍ¥ÄÎ¶¨Ïûê ÏûêÍ≤© ÏöîÍ±¥ Î∞è Ï±ÖÏûÑ Í∞ïÌôî`
                ],
                'ÌôòÍ≤Ω': [
                    `ÌôòÍ≤ΩÏòÅÌñ•ÌèâÍ∞Ä Ï†àÏ∞® Í∞ïÌôî Î∞è Í∏∞Ï§Ä Í∞úÏÑ†`,
                    `Ïò§ÏóºÎ¨ºÏßà Î∞∞Ï∂ú Í∏∞Ï§Ä Í∞ïÌôî Î∞è Î™®ÎãàÌÑ∞ÎßÅ Ï≤¥Í≥Ñ Í∞úÏÑ†`,
                    `ÏπúÌôòÍ≤Ω Í∏∞Ïà† ÎèÑÏûÖ ÏßÄÏõê Î∞è Ïù∏ÏÑºÌã∞Î∏å ÌôïÎåÄ`
                ],
                'Ïù∏ÏÇ¨ÎÖ∏Î¨¥': [
                    `Í∑ºÎ°úÏãúÍ∞Ñ Îã®Ï∂ï Î∞è Ìú¥Í∞ÄÏ†úÎèÑ Í∞úÏÑ†`,
                    `ÏßÅÏû• ÎÇ¥ Í¥¥Î°≠Ìûò Î∞©ÏßÄ ÎåÄÏ±Ö Í∞ïÌôî`,
                    `ÏûÑÍ∏àÏ≤¥Í≥Ñ Ìà¨Î™ÖÌôî Î∞è ÏÑ±Í≥ºÌèâÍ∞Ä Í∞úÏÑ†`
                ],
                'Ïû¨Î¨¥ÌöåÍ≥Ñ': [
                    `Ïû¨Î¨¥Ï†úÌëú Í≥µÏãú ÏùòÎ¨¥ Í∞ïÌôî Î∞è Ìà¨Î™ÖÏÑ± Ï†úÍ≥†`,
                    `ÎÇ¥Î∂ÄÌÜµÏ†úÏãúÏä§ÌÖú Íµ¨Ï∂ï Î∞è Ïö¥ÏòÅ ÏùòÎ¨¥Ìôî`,
                    `ÌöåÍ≥ÑÍ∞êÏÇ¨ ÎèÖÎ¶ΩÏÑ± Í∞ïÌôî Î∞©Ïïà ÎèÑÏûÖ`
                ],
                'Ï†ïÎ≥¥Î≥¥Ìò∏': [
                    `Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ® Í≥µÍ∞ú Î∞è ÎèôÏùò Ï†àÏ∞® Í∞ïÌôî`,
                    `Ï†ïÎ≥¥Î≥¥Ïïà Í¥ÄÎ¶¨Ï≤¥Í≥Ñ Ïù∏Ï¶ù ÏùòÎ¨¥Ìôî`,
                    `Îç∞Ïù¥ÌÑ∞ Ïú†Ï∂ú Ïãú Ïã†Í≥† Î∞è ÎåÄÏùë Ï†àÏ∞® Í∞úÏÑ†`
                ],
                'ÏßÄÎ∞∞Íµ¨Ï°∞': [
                    `Ïù¥ÏÇ¨Ìöå Íµ¨ÏÑ± Îã§ÏñëÏÑ± ÌôïÎ≥¥ Î∞è ÎèÖÎ¶ΩÏÑ± Í∞ïÌôî`,
                    `Ï£ºÏ£ºÏ¥ùÌöå Ïö¥ÏòÅ Ìà¨Î™ÖÏÑ± Ï†úÍ≥† Î∞©Ïïà ÎèÑÏûÖ`,
                    `Í≤ΩÏòÅÏßÑ ÏÑ±Í≥ºÌèâÍ∞Ä Î∞è Î≥¥ÏÉÅÏ≤¥Í≥Ñ Í∞úÏÑ†`
                ]
            };
            
            const templates = contentTemplates[category] || [
                `Í¥ÄÎ†® Í∑úÏ†ïÏùò Î™ÖÌôïÌôî Î∞è Ï†àÏ∞® Í∞ÑÏÜåÌôî`,
                `ÌñâÏ†ïÏ≤òÎ∂Ñ Í∏∞Ï§Ä Ìï©Î¶¨Ìôî Î∞è Íµ¨Ï†úÏ†àÏ∞® Í∞úÏÑ†`,
                `Í¥ÄÎ†® Í∏∞Í¥Ä Í∞Ñ ÌòëÎ†•Ï≤¥Í≥Ñ Í∞ïÌôî`
            ];
            
            const selectedContent = templates[Math.floor(Math.random() * templates.length)];
            
            return `
                <p><strong>Ï£ºÏöî Í∞úÏ†ïÏÇ¨Ìï≠:</strong></p>
                <ul>
                    <li>${selectedContent}</li>
                    <li>Í¥ÄÎ†® Ïö©Ïñ¥ Ï†ïÏùò Î™ÖÌôïÌôî Î∞è Ï†ÅÏö©Î≤îÏúÑ Ï°∞Ï†ï</li>
                    <li>ÌñâÏ†ïÏ†àÏ∞® Í∞ÑÏÜåÌôî Î∞è ÎØºÏõêÏù∏ Ìé∏Ïùò Ï¶ùÏßÑ</li>
                    <li>Ï†úÏû¨ ÏàòÏ§Ä Ï°∞Ï†ï Î∞è Íµ¨Ï†úÏ†àÏ∞® Í∞úÏÑ†</li>
                </ul>
                <p><strong>Í∞úÏ†ï ÌòïÌÉú:</strong> ${lawType}</p>
            `;
        }
        
        function generateAmendmentArticles(item) {
            const category = item.categories?.[0] || 'Í∏∞ÌÉÄ';
            
            const articleTemplates = {
                'ÏïàÏ†Ñ': [
                    `Ï†ú8Ï°∞(ÏïàÏ†ÑÍ¥ÄÎ¶¨ ÏùòÎ¨¥) - ÏïàÏ†ÑÍ¥ÄÎ¶¨ Ï±ÖÏûÑÏûê ÏßÄÏ†ï Î∞è ÍµêÏú° Í∞ïÌôî`,
                    `Ï†ú15Ï°∞(ÏïàÏ†ÑÏ†êÍ≤Ä) - Ï†ïÍ∏∞Ï†êÍ≤Ä Ï£ºÍ∏∞ Îã®Ï∂ï Î∞è Ï†êÍ≤ÄÌï≠Î™© ÏÑ∏Î∂ÑÌôî`,
                    `Ï†ú22Ï°∞(ÏÇ¨Í≥†Î≥¥Í≥†) - ÏÇ¨Í≥† Î∞úÏÉù Ïãú Ï¶âÏãú Ïã†Í≥† ÏùòÎ¨¥ Î∞è Ï†àÏ∞® Î™ÖÌôïÌôî`
                ],
                'ÌôòÍ≤Ω': [
                    `Ï†ú12Ï°∞(ÌôòÍ≤ΩÏòÅÌñ•ÌèâÍ∞Ä) - ÌèâÍ∞Ä ÎåÄÏÉÅ ÌôïÎåÄ Î∞è Ï†àÏ∞® Í∞ïÌôî`,
                    `Ï†ú18Ï°∞(Î∞∞Ï∂úÍ∏∞Ï§Ä) - Ïò§ÏóºÎ¨ºÏßà Î∞∞Ï∂úÌóàÏö©Í∏∞Ï§Ä Í∞ïÌôî`,
                    `Ï†ú25Ï°∞(ÌôòÍ≤ΩÍ∞úÏÑ†) - ÌôòÍ≤ΩÍ∞úÏÑ†Î™ÖÎ†π Î∞úÎ†π ÏöîÍ±¥ Î∞è Ï†àÏ∞® Í∞úÏÑ†`
                ],
                'Ïù∏ÏÇ¨ÎÖ∏Î¨¥': [
                    `Ï†ú9Ï°∞(Í∑ºÎ°úÍ≥ÑÏïΩ) - Í≥ÑÏïΩÏÑú ÏûëÏÑ± ÏùòÎ¨¥ÏÇ¨Ìï≠ Ï∂îÍ∞Ä Î∞è Î™ÖÌôïÌôî`,
                    `Ï†ú16Ï°∞(Í∑ºÎ°úÏãúÍ∞Ñ) - Ïó∞Ïû•Í∑ºÎ°ú Ï†úÌïú Î∞è Ìú¥Í≤åÏãúÍ∞Ñ Î≥¥Ïû•`,
                    `Ï†ú23Ï°∞(Ìú¥Í∞ÄÏ†úÎèÑ) - Ïó∞Ï∞®Ìú¥Í∞Ä ÏÇ¨Ïö© Ï¥âÏßÑ Î∞è ÎåÄÏ≤¥Ìú¥Í∞Ä ÌôïÎåÄ`
                ],
                'Ïû¨Î¨¥ÌöåÍ≥Ñ': [
                    `Ï†ú7Ï°∞(Ïû¨Î¨¥Ï†úÌëú ÏûëÏÑ±) - ÏûëÏÑ± Í∏∞Ï§Ä Î∞è Í≥µÏãú ÏùòÎ¨¥ Í∞ïÌôî`,
                    `Ï†ú14Ï°∞(Í∞êÏÇ¨ÏúÑÏõêÌöå) - Íµ¨ÏÑ± ÏöîÍ±¥ Î∞è ÎèÖÎ¶ΩÏÑ± ÌôïÎ≥¥ Î∞©Ïïà`,
                    `Ï†ú21Ï°∞(ÎÇ¥Î∂ÄÌÜµÏ†ú) - ÎÇ¥Î∂ÄÌÜµÏ†úÏãúÏä§ÌÖú Íµ¨Ï∂ï Î∞è Ïö¥ÏòÅ Í∏∞Ï§Ä`
                ],
                'Ï†ïÎ≥¥Î≥¥Ìò∏': [
                    `Ï†ú6Ï°∞(Í∞úÏù∏Ï†ïÎ≥¥ ÏàòÏßë) - ÏàòÏßë Î™©Ï†Å Î™ÖÏãú Î∞è ÎèôÏùò Ï†àÏ∞® Í∞ïÌôî`,
                    `Ï†ú13Ï°∞(Ï†ïÎ≥¥Î≥¥Ïïà) - Î≥¥ÏïàÍ¥ÄÎ¶¨Ï≤¥Í≥Ñ Íµ¨Ï∂ï Î∞è Ïù∏Ï¶ù Ï∑®Îìù`,
                    `Ï†ú20Ï°∞(Ï†ïÎ≥¥Ïú†Ï∂ú ÎåÄÏùë) - Ïú†Ï∂ú Ïãú Ïã†Í≥† ÏùòÎ¨¥ Î∞è ÎåÄÏùëÏ†àÏ∞®`
                ],
                'ÏßÄÎ∞∞Íµ¨Ï°∞': [
                    `Ï†ú5Ï°∞(Ïù¥ÏÇ¨Ìöå Íµ¨ÏÑ±) - ÎèÖÎ¶ΩÏù¥ÏÇ¨ ÎπÑÏú® ÌôïÎåÄ Î∞è Îã§ÏñëÏÑ± ÌôïÎ≥¥`,
                    `Ï†ú11Ï°∞(Ï£ºÏ£ºÏ¥ùÌöå) - ÏùòÍ≤∞Í∂å ÌñâÏÇ¨ Î∞è Ï†ïÎ≥¥Ï†úÍ≥µ Í∞úÏÑ†`,
                    `Ï†ú19Ï°∞(ÏûÑÏõêÎ≥¥Ïàò) - Î≥¥ÏàòÏ≤¥Í≥Ñ Í≥µÏãú Î∞è ÏÑ±Í≥ºÏó∞Îèô Í∞ïÌôî`
                ]
            };
            
            const templates = articleTemplates[category] || [
                `Ï†ú4Ï°∞(Ï†ÅÏö©Î≤îÏúÑ) - Ï†ÅÏö© ÎåÄÏÉÅ Î∞è Î≤îÏúÑ Î™ÖÌôïÌôî`,
                `Ï†ú10Ï°∞(Ï†àÏ∞®Í∑úÏ†ï) - ÌñâÏ†ïÏ†àÏ∞® Í∞ÑÏÜåÌôî Î∞è Ï≤òÎ¶¨Í∏∞Ìïú Îã®Ï∂ï`,
                `Ï†ú17Ï°∞(Î≤åÏπôÍ∑úÏ†ï) - ÏúÑÎ∞ò Ïãú Ï†úÏû¨ ÏàòÏ§Ä Ï°∞Ï†ï Î∞è Íµ¨Ï†úÏ†àÏ∞® Í∞úÏÑ†`
            ];
            
            const selectedArticles = [...templates].sort(() => 0.5 - Math.random()).slice(0, 3);
            
            return `
                <p><strong>Ï£ºÏöî Í∞úÏ†ï Ï°∞Ìï≠:</strong></p>
                <ul>
                    ${selectedArticles.map(article => `<li>${article}</li>`).join('')}
                </ul>
                <p><em>‚Äª ÏÉÅÏÑ∏Ìïú Ï°∞Î¨∏ ÎÇ¥Ïö©ÏùÄ Íµ≠Í∞ÄÎ≤ïÎ†πÏ†ïÎ≥¥ÏÑºÌÑ∞ÏóêÏÑú ÌôïÏù∏ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.</em></p>
            `;
        }

        function closeLawModal() {
            document.getElementById('law-modal').classList.remove('show');
        }

        function getDaysFromNow(dateStr) {
            if (!dateStr) return null;
            const targetDate = new Date(dateStr);
            const now = new Date();
            const diffTime = targetDate - now;
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        }

        function showError(message) {
            const elements = [];
            elements.forEach(id => {
                document.getElementById(id).textContent = 'Ïò§Î•ò';
            });
            
            document.getElementById('timestamp').textContent = 'Î°úÎî© Ïã§Ìå®';
            document.getElementById('law-list').innerHTML = `<div class="error">${message}</div>`;
            document.getElementById('law-count').textContent = '(Ïò§Î•ò)';
        }

        // Modal Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
        document.getElementById('law-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeLawModal();
            }
        });
        
        document.getElementById('quarterly-modal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeQuarterlyModal();
            }
        });
        
        // Quarterly View Functions
        function initializeQuarterlyView() {
            const quarterlyTabs = document.querySelectorAll('.quarterly-tab');
            
            // Update quarterly counts
            updateQuarterlyCounts();
            
            quarterlyTabs.forEach(tab => {
                tab.addEventListener('click', function() {
                    const quarter = this.dataset.quarter;
                    showQuarterlyModal(quarter);
                });
            });
        }
        
        function updateQuarterlyCounts() {
            const quarters = {
                'Q1': { months: [1, 2, 3], count: 0 },
                'Q2': { months: [4, 5, 6], count: 0 },
                'Q3': { months: [7, 8, 9], count: 0 },
                'Q4': { months: [10, 11, 12], count: 0 }
            };
            
            lawsData.forEach(law => {
                if (law.effectiveDate) {
                    const date = new Date(law.effectiveDate);
                    const month = date.getMonth() + 1;
                    
                    Object.keys(quarters).forEach(quarter => {
                        if (quarters[quarter].months.includes(month)) {
                            quarters[quarter].count++;
                        }
                    });
                }
            });
            
            // Update UI
            document.getElementById('q1-count').textContent = quarters.Q1.count;
            document.getElementById('q2-count').textContent = quarters.Q2.count;
            document.getElementById('q3-count').textContent = quarters.Q3.count;
            document.getElementById('q4-count').textContent = quarters.Q4.count;
        }
        
        function showQuarterlyModal(quarter) {
            const quarterInfo = {
                'Q1': { title: '1Î∂ÑÍ∏∞ Í∞úÏ†ï Î≤ïÎ†π', period: '2025ÎÖÑ 1Ïõî ~ 3Ïõî', months: [1, 2, 3], icon: 'üå±' },
                'Q2': { title: '2Î∂ÑÍ∏∞ Í∞úÏ†ï Î≤ïÎ†π', period: '2025ÎÖÑ 4Ïõî ~ 6Ïõî', months: [4, 5, 6], icon: '‚òÄÔ∏è' },
                'Q3': { title: '3Î∂ÑÍ∏∞ Í∞úÏ†ï Î≤ïÎ†π', period: '2025ÎÖÑ 7Ïõî ~ 9Ïõî', months: [7, 8, 9], icon: 'üçÇ' },
                'Q4': { title: '4Î∂ÑÍ∏∞ Í∞úÏ†ï Î≤ïÎ†π', period: '2025ÎÖÑ 10Ïõî ~ 12Ïõî', months: [10, 11, 12], icon: '‚ùÑÔ∏è' }
            };
            
            const info = quarterInfo[quarter];
            if (!info) return;
            
            // Filter laws for this quarter
            const quarterLaws = lawsData.filter(law => {
                if (!law.effectiveDate) return false;
                const date = new Date(law.effectiveDate);
                const month = date.getMonth() + 1;
                return info.months.includes(month);
            }).sort((a, b) => {
                const dateA = new Date(a.effectiveDate || '1900-01-01');
                const dateB = new Date(b.effectiveDate || '1900-01-01');
                return dateA - dateB;
            });
            
            // Update modal content
            document.getElementById('quarterly-modal-title').textContent = `${info.icon} ${info.title}`;
            document.getElementById('quarterly-modal-subtitle').textContent = `${info.period} ‚Ä¢ Ï¥ù ${quarterLaws.length}Í±¥`;
            
            // Generate summary
            generateQuarterlySummary(quarter, quarterLaws);
            
            // Generate law list
            generateQuarterlyLawList(quarterLaws);
            
            // Show modal
            document.getElementById('quarterly-modal').classList.add('show');
        }
        
        function generateQuarterlySummary(quarter, laws) {
            const categories = {};
            const ministries = {};
            let urgentCount = 0;
            
            laws.forEach(law => {
                // Count by categories
                if (law.categories) {
                    law.categories.forEach(cat => {
                        categories[cat] = (categories[cat] || 0) + 1;
                    });
                }
                
                // Count by ministries
                const ministry = law.meta?.ministry || 'ÎØ∏ÏÉÅ';
                ministries[ministry] = (ministries[ministry] || 0) + 1;
                
                // Count urgent laws (within 30 days)
                const daysUntil = getDaysFromNow(law.effectiveDate);
                if (daysUntil <= 30 && daysUntil > 0) {
                    urgentCount++;
                }
            });
            
            const topCategories = Object.entries(categories)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 3);
                
            const topMinistries = Object.entries(ministries)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 3);
            
            const summaryHtml = `
                <div class="quarterly-stats">
                    <div class="quarterly-stat">
                        <div class="quarterly-stat-value">${laws.length}</div>
                        <div class="quarterly-stat-label">Ï¥ù Í∞úÏ†ï Î≤ïÎ†π</div>
                    </div>
                    <div class="quarterly-stat">
                        <div class="quarterly-stat-value quarterly-urgent">${urgentCount}</div>
                        <div class="quarterly-stat-label">Í∏¥Í∏â ÎåÄÏùë ÌïÑÏöî</div>
                    </div>
                    <div class="quarterly-stat">
                        <div class="quarterly-stat-value">${Object.keys(categories).length}</div>
                        <div class="quarterly-stat-label">ÏòÅÌñ• ÏóÖÎ¨¥ Î∂ÑÏïº</div>
                    </div>
                </div>
                
                <div class="quarterly-details">
                    <div class="quarterly-detail-section">
                        <h4>üèÜ Ï£ºÏöî ÏóÖÎ¨¥ Î∂ÑÏïº</h4>
                        <ul>
                            ${topCategories.map(([cat, count]) => `<li><strong>${cat}</strong>: ${count}Í±¥</li>`).join('')}
                        </ul>
                    </div>
                    
                    <div class="quarterly-detail-section">
                        <h4>üèõÔ∏è Ï£ºÍ¥Ä Î∂ÄÏ≤ò</h4>
                        <ul>
                            ${topMinistries.map(([ministry, count]) => `<li><strong>${ministry}</strong>: ${count}Í±¥</li>`).join('')}
                        </ul>
                    </div>
                </div>
            `;
            
            document.getElementById('quarterly-summary').innerHTML = summaryHtml;
        }
        
        function generateQuarterlyLawList(laws) {
            if (laws.length === 0) {
                document.getElementById('quarterly-law-list').innerHTML = `
                    <div class="no-laws">Ìï¥Îãπ Î∂ÑÍ∏∞Ïóê Í∞úÏ†ïÎê† Î≤ïÎ†πÏù¥ ÏóÜÏäµÎãàÎã§.</div>
                `;
                return;
            }
            
            const listHtml = `
                <div class="quarterly-law-header">
                    <h4>üìã Î≤ïÎ†π Î™©Î°ù</h4>
                </div>
                <div class="quarterly-laws">
                    ${laws.map(law => {
                        const daysUntil = getDaysFromNow(law.effectiveDate);
                        const urgencyClass = daysUntil <= 7 ? 'urgent' : daysUntil <= 30 ? 'warning' : 'normal';
                        const urgencyText = daysUntil <= 0 ? 'ÏãúÌñâ Ï§ë' : daysUntil <= 7 ? `D-${daysUntil}` : law.effectiveDate;
                        
                        return `
                            <div class="quarterly-law-item ${urgencyClass}" onclick="showLawDetail('${law.id}')">
                                <div class="quarterly-law-info">
                                    <div class="quarterly-law-title">${law.title}</div>
                                    <div class="quarterly-law-meta">
                                        <span class="quarterly-law-ministry">${law.meta?.ministry || 'ÎØ∏ÏÉÅ'}</span>
                                        <span class="quarterly-law-type">${law.lawType || 'ÏùºÎ∂ÄÍ∞úÏ†ï'}</span>
                                        <span class="quarterly-law-categories">${(law.categories || []).join(', ')}</span>
                                    </div>
                                </div>
                                <div class="quarterly-law-date ${urgencyClass}">
                                    ${urgencyText}
                                </div>
                            </div>
                        `;
                    }).join('')}
                </div>
            `;
            
            document.getElementById('quarterly-law-list').innerHTML = listHtml;
        }
        
        function closeQuarterlyModal() {
            document.getElementById('quarterly-modal').classList.remove('show');
        }
