#!/usr/bin/env python3
"""
207개 기본 당사 적용법규 JSON 생성
"""

import json
from datetime import datetime

# 207개 기본 법규 데이터
base_laws_data = {
    "인사노무": [
        "파견근로자보호 등에 관한 법률",
        "파견근로자보호 등에 관한 법률 시행령",
        "파견근로자보호 등에 관한 법률 시행규칙",
        "채용절차의 공정화에 관한 법률",
        "채용절차의 공정화에 관한 법률 시행령",
        "채용절차의 공정화에 관한 법률 시행규칙",
        "장애인고용촉진 및 직업재활법",
        "장애인고용촉진 및 직업재활법 시행령",
        "장애인고용촉진 및 직업재활법 시행규칙",
        "장애인차별금지 및 권리구제 등에 관한 법률",
        "장애인차별금지 및 권리구제 등에 관한 법률 시행령",
        "남녀고용평등과 일·가정 양립 지원에 관한 법률",
        "남녀고용평등과 일·가정 양립 지원에 관한 법률 시행령",
        "남녀고용평등과 일·가정 양립 지원에 관한 법률 시행규칙",
        "기간제 및 단시간근로자 보호 등에 관한 법률",
        "기간제 및 단시간근로자 보호 등에 관한 법률 시행령",
        "기간제 및 단시간근로자 보호 등에 관한 법률 시행규칙",
        "근로기준법",
        "근로기준법 시행령",
        "근로기준법 시행규칙",
        "최저임금법",
        "최저임금법 시행령",
        "최저임금법 시행규칙",
        "근로자퇴직급여 보장법",
        "근로자퇴직급여 보장법 시행령",
        "근로자퇴직급여 보장법 시행규칙",
        "근로복지기본법",
        "근로복지기본법 시행령",
        "근로복지기본법 시행규칙",
        "고용보험법",
        "고용보험법 시행령",
        "고용보험법 시행규칙",
        "고용정책 기본법",
        "고용정책 기본법 시행령",
        "고용정책 기본법 시행규칙",
        "노동조합 및 노동관계조정법",
        "노동조합 및 노동관계조정법 시행령",
        "노동조합 및 노동관계조정법 시행규칙",
        "근로자 참여 및 협력 증진에 관한 법률",
        "근로자 참여 및 협력 증진에 관한 법률 시행령",
        "근로자 참여 및 협력 증진에 관한 법률 시행규칙"
    ],
    "공정거래": [
        "대리점 거래의 공정화에 관한 법률",
        "대리점 거래의 공정화에 관한 법률 시행령",
        "독점규제 및 공정거래에 관한 법률",
        "독점규제 및 공정거래에 관한 법률 시행령",
        "하도급거래 공정화에 관한 법률",
        "하도급거래 공정화에 관한 법률 시행령",
        "대·중소기업 상생협력 촉진에 관한 법률",
        "대·중소기업 상생협력 촉진에 관한 법률 시행령",
        "대·중소기업 상생협력 촉진에 관한 법률 시행규칙",
        "약관의 규제에 관한 법률",
        "약관의 규제에 관한 법률 시행령"
    ],
    "지식재산권": [
        "특허법",
        "특허법 시행령",
        "특허법 시행규칙",
        "특허법·실용신안법·의장법·상표법의 시행에 관한 규칙",
        "실용신안법",
        "실용신안법 시행령",
        "실용신안법 시행규칙"
    ],
    "정보보호": [
        "개인정보 보호법",
        "개인정보 보호법 시행령",
        "정보통신망 이용촉진 및 정보보호 등에 관한 법률",
        "정보통신망 이용촉진 및 정보보호 등에 관한 법률 시행령",
        "정보통신망 이용촉진 및 정보보호 등에 관한 법률 시행규칙",
        "부정경쟁방지 및 영업비밀보호에 관한 법률",
        "부정경쟁방지 및 영업비밀보호에 관한 법률 시행령",
        "정보보호산업의 진흥에 관한 법률",
        "정보보호산업의 진흥에 관한 법률 시행령",
        "정보보호산업의 진흥에 관한 법률 시행규칙",
        "산업기술의 유출방지 및 보호에 관한 법률",
        "산업기술의 유출방지 및 보호에 관한 법률 시행령",
        "산업기술의 유출방지 및 보호에 관한 법률 시행규칙",
        "국가첨단전략산업 경쟁력 강화 및 보호에 관한 특별조치법",
        "국가첨단전략산업 경쟁력 강화 및 보호에 관한 특별조치법 시행령",
        "국가첨단전략산업 경쟁력 강화 및 보호에 관한 특별조치법 시행규칙"
    ],
    "지배구조": [
        "부정청탁 및 금품등 수수의 금지에 관한 법률",
        "부정청탁 및 금품등 수수의 금지에 관한 법률 시행령",
        "상법",
        "상법 시행령",
        "주식회사 등의 외부감사에 관한 법률",
        "주식회사 등의 외부감사에 관한 법률 시행령",
        "주식회사 등의 외부감사에 관한 법률 시행규칙"
    ],
    "재무회계": [
        "법인세법",
        "법인세법 시행령",
        "법인세법 시행규칙",
        "지방세법",
        "지방세법 시행령",
        "지방세법 시행규칙",
        "임시수입부가가치세법",
        "증권거래세법",
        "증권거래세법 시행령",
        "증권거래세법 시행규칙",
        "종합부동산세법",
        "종합부동산세법 시행령",
        "종합부동산세법 시행규칙",
        "국제조세조정에 관한 법률",
        "국제조세조정에 관한 법률 시행령",
        "국제조세조정에 관한 법률 시행규칙",
        "자본시장과 금융투자업에 관한 법률",
        "자본시장과 금융투자업에 관한 법률 시행령",
        "자본시장과 금융투자업에 관한 법률 시행규칙"
    ],
    "환경": [  # 환경/에너지를 환경으로 통일
        "대기환경보전법",
        "대기환경보전법 시행령",
        "대기환경보전법 시행규칙",
        "토양환경보전법",
        "토양환경보전법 시행령",
        "토양환경보전법 시행규칙",
        "물환경보전법",
        "물환경보전법 시행령",
        "물환경보전법 시행규칙",
        "폐기물관리법",
        "폐기물관리법 시행령",
        "폐기물관리법 시행규칙",
        "해양폐기물 및 해양오염퇴적물 관리법",
        "잔류성 오염물질 관리법",
        "잔류성 오염물질 관리법 시행령",
        "잔류성 오염물질 관리법 시행규칙",
        "화학물질관리법",
        "화학물질관리법 시행령",
        "화학물질관리법 시행규칙",
        "소음·진동관리법",
        "소음·진동관리법 시행령",
        "소음·진동관리법 시행규칙",
        "자원의 절약과 재활용 촉진에 관한 법률",
        "자원의 절약과 재활용 촉진에 관한 법률 시행령",
        "자원의 절약과 재활용 촉진에 관한 법률 시행규칙",
        "하수도법",
        "하수도법 시행령",
        "하수도법 시행규칙",
        "악취방지법",
        "악취방지법 시행령",
        "악취방지법 시행규칙",
        "환경영향평가법",
        "환경영향평가법 시행령",
        "환경영향평가법 시행규칙",
        "온실가스 배출권의 할당 및 거래에 관한 법률",
        "온실가스 배출권의 할당 및 거래에 관한 법률 시행령",
        "에너지이용 합리화법",
        "에너지이용 합리화법 시행령",
        "에너지이용 합리화법 시행규칙",
        "환경정책기본법",
        "환경정책기본법 시행령",
        "환경정책기본법 시행규칙",
        "환경개선비용의 부담에 관한 법률",
        "환경개선비용의 부담에 관한 법률 시행령",
        "환경개선비용의 부담에 관한 법률 시행규칙",
        "환경기술 및 환경산업 지원법",
        "환경기술 및 환경산업 지원법 시행령",
        "환경기술 및 환경산업 지원법 시행규칙",
        "먹는물관리법",
        "먹는물관리법 시행령",
        "먹는물관리법 시행규칙",
        "수도법",
        "수도법 시행령",
        "수도법 시행규칙",
        "자원순환기본법",
        "자원순환기본법 시행령",
        "자원순환기본법 시행규칙",
        "화학물질의 등록 및 평가 등에 관한 법률",
        "화학물질의 등록 및 평가 등에 관한 법률 시행령",
        "화학물질의 등록 및 평가 등에 관한 법률 시행규칙",
        "기후위기 대응을 위한 탄소중립·녹색성장 기본법",
        "기후위기 대응을 위한 탄소중립·녹색성장 기본법 시행령",
        "건설폐기물의 재활용촉진에 관한 법률",
        "건설폐기물의 재활용촉진에 관한 법률 시행령",
        "건설폐기물의 재활용촉진에 관한 법률 시행규칙"
    ],
    "안전": [  # 안전/보건을 안전으로 통일
        "산업안전보건법",
        "산업안전보건법 시행령",
        "산업안전보건법 시행규칙",
        "고압가스 안전관리법",
        "고압가스 안전관리법 시행규칙",
        "소방시설 설치 및 관리에 관한 법률",
        "소방시설 설치 및 관리에 관한 법률 시행령",
        "소방시설 설치 및 관리에 관한 법률 시행규칙",
        "중대재해 처벌 등에 관한 법률",
        "중대재해 처벌 등에 관한 법률 시행령",
        "석면안전관리법",
        "석면안전관리법 시행령",
        "석면안전관리법 시행규칙",
        "위험물 안전관리법",
        "연구실 안전환경 조성에 관한 법률",
        "연구실 안전환경 조성에 관한 법률 시행령",
        "연구실 안전환경 조성에 관한 법률 시행규칙",
        "전기안전관리법",
        "전기안전관리법 시행령",
        "전기안전관리법 시행규칙",
        "화재의 예방 및 안전관리에 관한 법률",
        "화재의 예방 및 안전관리에 관한 법률 시행령",
        "화재의 예방 및 안전관리에 관한 법률 시행규칙",
        "액화석유가스의 안전관리 및 사업법",
        "액화석유가스의 안전관리 및 사업법 시행령",
        "액화석유가스의 안전관리 및 사업법 시행규칙",
        "도시가스사업법",
        "도시가스사업법 시행령",
        "도시가스사업법 시행규칙",
        "원자력안전법",
        "원자력안전법 시행령",
        "원자력안전법 시행규칙",
        "승강기 안전관리법",
        "승강기 안전관리법 시행령",
        "승강기 안전관리법 시행규칙",
        "감염병의 예방 및 관리에 관한 법률",
        "감염병의 예방 및 관리에 관한 법률 시행령",
        "감염병의 예방 및 관리에 관한 법률 시행규칙",
        "식품위생법",
        "식품위생법 시행령",
        "식품위생법 시행규칙"
    ]
}

def determine_law_type(law_name):
    """법령 종류 판별"""
    if "시행규칙" in law_name:
        return "시행규칙"
    elif "시행령" in law_name:
        return "시행령"
    else:
        return "법률"

def determine_ministry(law_name, category):
    """소관부처 추정"""
    ministry_map = {
        "근로": "고용노동부",
        "고용": "고용노동부",
        "노동": "고용노동부",
        "파견": "고용노동부",
        "채용": "고용노동부",
        "장애인": "고용노동부",
        "남녀고용": "고용노동부",
        "최저임금": "고용노동부",
        "퇴직": "고용노동부",
        "공정거래": "공정거래위원회",
        "독점": "공정거래위원회",
        "하도급": "공정거래위원회",
        "대리점": "공정거래위원회",
        "약관": "공정거래위원회",
        "상생협력": "중소벤처기업부",
        "특허": "특허청",
        "실용신안": "특허청",
        "개인정보": "개인정보보호위원회",
        "정보통신": "과학기술정보통신부",
        "정보보호": "과학기술정보통신부",
        "부정경쟁": "특허청",
        "산업기술": "산업통상자원부",
        "국가첨단": "산업통상자원부",
        "부정청탁": "국민권익위원회",
        "상법": "법무부",
        "외부감사": "금융위원회",
        "법인세": "국세청",
        "지방세": "행정안전부",
        "증권": "금융위원회",
        "종합부동산": "국세청",
        "국제조세": "국세청",
        "자본시장": "금융위원회",
        "대기": "환경부",
        "토양": "환경부",
        "물환경": "환경부",
        "폐기물": "환경부",
        "해양": "해양수산부",
        "화학": "환경부",
        "소음": "환경부",
        "자원": "환경부",
        "하수": "환경부",
        "악취": "환경부",
        "환경": "환경부",
        "온실가스": "환경부",
        "에너지": "산업통상자원부",
        "먹는물": "환경부",
        "수도": "환경부",
        "기후": "환경부",
        "건설폐기물": "환경부",
        "산업안전": "고용노동부",
        "고압가스": "산업통상자원부",
        "소방": "소방청",
        "중대재해": "고용노동부",
        "석면": "환경부",
        "위험물": "소방청",
        "연구실": "과학기술정보통신부",
        "전기": "산업통상자원부",
        "화재": "소방청",
        "액화석유": "산업통상자원부",
        "도시가스": "산업통상자원부",
        "원자력": "원자력안전위원회",
        "승강기": "행정안전부",
        "감염병": "질병관리청",
        "식품": "식품의약품안전처"
    }
    
    for keyword, ministry in ministry_map.items():
        if keyword in law_name:
            return ministry
    
    # 카테고리별 기본 부처
    category_default = {
        "인사노무": "고용노동부",
        "공정거래": "공정거래위원회",
        "지식재산권": "특허청",
        "정보보호": "개인정보보호위원회",
        "지배구조": "법무부",
        "재무회계": "기획재정부",
        "환경": "환경부",
        "안전": "고용노동부"
    }
    
    return category_default.get(category, "기타")

def create_base_laws_json():
    """207개 기본 법규 JSON 생성"""
    
    items = []
    law_id = 1
    
    for category, laws in base_laws_data.items():
        for law_name in laws:
            item = {
                "id": f"law_{law_id:03d}",
                "title": law_name,
                "categories": [category],
                "lawType": determine_law_type(law_name),
                "effectiveDate": "2025-01-01",  # 기본값
                "status": "현행",
                "meta": {
                    "ministry": determine_ministry(law_name, category),
                    "lastUpdated": datetime.now().isoformat()
                }
            }
            items.append(item)
            law_id += 1
    
    # JSON 구조
    base_laws_json = {
        "generatedAt": int(datetime.now().timestamp()),
        "year": 2025,
        "description": "2025년 당사 적용 법규 207개 기본 목록",
        "total_laws": len(items),
        "items": items
    }
    
    # 파일 저장
    output_path = "/home/user/webapp/docs/base_laws_207.json"
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(base_laws_json, f, ensure_ascii=False, indent=2)
    
    print(f"✅ 207개 기본 법규 JSON 생성 완료: {output_path}")
    
    # 카테고리별 통계
    category_counts = {}
    for item in items:
        cat = item["categories"][0]
        category_counts[cat] = category_counts.get(cat, 0) + 1
    
    print("\n📊 카테고리별 분포:")
    for cat, count in sorted(category_counts.items(), key=lambda x: -x[1]):
        print(f"  {cat}: {count}개")
    
    print(f"\n총 {len(items)}개 법규")
    
    return base_laws_json

if __name__ == "__main__":
    create_base_laws_json()